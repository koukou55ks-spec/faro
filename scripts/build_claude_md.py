#!/usr/bin/env python3
"""
CLAUDE.md自動生成スクリプト

使い方:
  python scripts/build_claude_md.py

機能:
1. specs/_ABSOLUTE.mdを必ず含める
2. specs/high/以下の全MDファイルを含める
3. specs/low/は軽く要約して含める
4. 英語化してトークン削減
5. CLAUDE.mdを上書き
"""

import os
import glob
from pathlib import Path
from datetime import datetime

# Gemini APIで要約・翻訳（オプション）
USE_AI_SUMMARY = False  # Trueにすると自動要約

def read_file(filepath):
    """ファイルを読み込み"""
    with open(filepath, 'r', encoding='utf-8') as f:
        return f.read()

def get_all_specs():
    """specs/以下の全ファイルを優先度順に取得"""
    specs = {
        'absolute': None,
        'high': [],
        'low': []
    }

    # 絶対優先
    absolute_path = 'specs/_ABSOLUTE.md'
    if os.path.exists(absolute_path):
        specs['absolute'] = {
            'path': absolute_path,
            'content': read_file(absolute_path)
        }

    # 高優先
    for filepath in glob.glob('specs/high/*.md'):
        specs['high'].append({
            'name': Path(filepath).stem,
            'path': filepath,
            'content': read_file(filepath)
        })

    # 低優先
    for filepath in glob.glob('specs/low/*.md'):
        specs['low'].append({
            'name': Path(filepath).stem,
            'path': filepath,
            'content': read_file(filepath)
        })

    return specs

def translate_to_english(text):
    """英語化（簡易版）"""
    # TODO: Gemini APIで翻訳
    # 現在は日本語のまま返す
    return text

def summarize_low_priority(specs_low):
    """低優先度を要約"""
    summary = "## Low Priority Specs (Summary)\n\n"
    for spec in specs_low:
        summary += f"### {spec['name']}\n"
        # 最初の3行だけ抜粋
        lines = spec['content'].split('\n')[:5]
        summary += '\n'.join(lines) + "\n\n...(詳細はspecs/low/参照)\n\n"
    return summary

def build_claude_md(specs):
    """CLAUDE.mdを生成"""

    output = []

    # ヘッダー
    output.append(f"""# CLAUDE.md

**Auto-generated from /specs/ - Do not edit manually**

Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Generated by: scripts/build_claude_md.py

---

""")

    # 絶対優先
    if specs['absolute']:
        output.append("# ABSOLUTE PRIORITY\n\n")
        output.append(specs['absolute']['content'])
        output.append("\n\n---\n\n")

    # 高優先
    if specs['high']:
        output.append("# HIGH PRIORITY\n\n")
        for spec in specs['high']:
            output.append(f"## {spec['name']}\n\n")
            output.append(spec['content'])
            output.append("\n\n---\n\n")

    # 低優先（要約）
    if specs['low']:
        output.append(summarize_low_priority(specs['low']))

    # フッター
    output.append(f"""
---

**Source Files:**
- Absolute: {specs['absolute']['path'] if specs['absolute'] else 'None'}
- High Priority: {len(specs['high'])} files
- Low Priority: {len(specs['low'])} files (summarized)

To update this file, run:
```bash
python scripts/build_claude_md.py
```

Or use Slash Command:
```
/rebuild-claude-md
```
""")

    return ''.join(output)

def main():
    print("Building CLAUDE.md from /specs/...")

    # specs/以下を収集
    specs = get_all_specs()

    print(f"  [OK] Absolute: {'Found' if specs['absolute'] else 'Not found'}")
    print(f"  [OK] High priority: {len(specs['high'])} files")
    print(f"  [OK] Low priority: {len(specs['low'])} files")

    # CLAUDE.md生成
    claude_md_content = build_claude_md(specs)

    # バックアップ
    if os.path.exists('CLAUDE.md'):
        backup_path = f'CLAUDE.md.backup.{datetime.now().strftime("%Y%m%d_%H%M%S")}'
        os.rename('CLAUDE.md', backup_path)
        print(f"  [OK] Backup created: {backup_path}")

    # 書き込み
    with open('CLAUDE.md', 'w', encoding='utf-8') as f:
        f.write(claude_md_content)

    print(f"\nCLAUDE.md generated successfully!")
    print(f"   Size: {len(claude_md_content)} characters")
    print(f"   Estimated tokens: ~{len(claude_md_content) // 3}")

if __name__ == '__main__':
    main()
